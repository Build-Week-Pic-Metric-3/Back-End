{
  "swagger": "2.0",
  "info": {
    "description": "Pic Metric 2 is an app where users can submit photos ",
    "version": "1.0.0",
    "title": "Pic Metric",
    "contact": {
      "email": "kevin.afable@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://www.mit.edu/~amini/LICENSE.md"
    }
  },
  "host": "www.google.com",
  "basePath": "/v2",
  "tags": [
    {
      "name": "Auth",
      "description": "Register / Login for new users."
    },
    {
      "name": "Photos",
      "description": "Add, retrieve, or delete photos."
    },
    {
      "name": "User",
      "description": "Operations about user"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Add a new user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },

    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login an existing user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal error updating user"
          }
        }
      }
    },
    "/photos/{photoID}": {
      "get": {
        "tags": ["Photos"],
        "summary": "Retrieve a photo and its analysis.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          {
            "in": "path",
            "name": "photoID",
            "description": "Backend ID of the photo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal error updating user"
          }
        }
      }
    },
    "/user/{userID}": {
      "get": {
        "tags": ["User"],
        "summary": "Get user by user ID",
        "description": "To be honest, I'm not sure why you would want this in the frontend. ",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "The userID that is requested. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Log out the user. Pending Tuesday testing, do not use yet.",
        "description": "This will end up blacklisting the JSON Web Token. ",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user information such as username and password",
        "description": "This can only be done by the logged in user. It will return a json ",
        "operationId": "updateUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user. Note that all photos that are associated with a user **WILL BE DELETED** as well.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        }
      },
      "xml": {
        "name": "Pet"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
